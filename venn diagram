import pandas as pd
import matplotlib.pyplot as plt
from matplotlib_venn import venn5, venn5_circles

# Assuming your dataframe is called 'df' with a column 'hyperparam_type' for the 5 settings

# Step 1: Create sets of unique combinations for each hyperparameter type
hyperparams = df['hyperparam_type'].unique()
sets = {}

for hp in hyperparams:
    # Create unique identifiers by combining the three columns
    subset = df[df['hyperparam_type'] == hp]
    unique_combinations = subset[['partition', 'minute_of_the_week', 'date']].drop_duplicates()
    # Create tuples for hashability
    sets[hp] = set(unique_combinations.itertuples(index=False, name=None))

# Step 2: Calculate all possible intersections (this gets complex with 5 sets)
# For visualization, we'll use matplotlib_venn which handles this automatically

# Step 3: Visualize
plt.figure(figsize=(12, 10))

# venn5 requires knowing the size of all possible intersections
# We'll need to calculate these:
from itertools import combinations

# Calculate all subset sizes
subset_sizes = {}
for i in range(1, 6):
    for combo in combinations(hyperparams, i):
        intersection = sets[combo[0]]
        for hp in combo[1:]:
            intersection = intersection & sets[hp]
        subset_sizes[combo] = len(intersection)

# The venn5 function expects sizes in a specific order:
# (Abcde, aBcde, ABcde, abCde, AbCde, aBCde, ABCde, abcDe, AbcDe, aBcDe, ABcDe, abCDE, ... etc.)
# This is complex - you might want to use a helper function or library

# Alternatively, if you have up to 5 hyperparameter settings, you can use:
venn_labels = [f"HP {i+1}" for i in range(5)]
venn5(subsets=subset_sizes, set_labels=venn_labels)
plt.title("Overlap between hyperparameter settings")
plt.show()
