import pandas as pd
import matplotlib.pyplot as plt
from matplotlib_venn import venn5, get_labels

# Assume your big DataFrame is called `df`
# And the column indicating hyperparam setting is 'hyperparam'

# Define the key columns for intersection
key_cols = ['partition', 'minute_of_the_week', 'date']

# Get unique hyperparams
hyperparams = df['hyperparam'].unique()

# Create sets of unique identifiers per hyperparam
sets = {
    h: set(map(tuple, df[df['hyperparam'] == h][key_cols].values))
    for h in hyperparams
}

# Select first 5 hyperparams if there are more
selected_hparams = list(sets.keys())[:5]
selected_sets = [sets[h] for h in selected_hparams]

# Generate subset labels (binary string keys like '11010') for venn5
labels = get_labels(selected_sets, fill='number')

# Plot
venn5(subsets=labels, set_labels=selected_hparams)
plt.title("Overlap of Runs Between Hyperparameter Settings")
plt.show()

# use another package
import pandas as pd
from upsetplot import UpSet, from_memberships
import matplotlib.pyplot as plt

# Assume df is your large DataFrame
key_cols = ['partition', 'minute_of_the_week', 'date']

# Get 5 unique hyperparams
hyperparams = df['hyperparam'].unique()[:5]

# Build a dictionary of sets
sets = {
    h: set(map(tuple, df[df['hyperparam'] == h][key_cols].values))
    for h in hyperparams
}

# Build membership list for each record
all_keys = set().union(*sets.values())
memberships = []

for k in all_keys:
    included_in = [name for name, s in sets.items() if k in s]
    memberships.append(included_in)

# Convert to UpSet-compatible format
data = from_memberships(memberships)

# Plot
up = UpSet(data, show_counts=True)
up.plot()
plt.title("Intersection of Hyperparameter Runs (UpSet Plot)")
plt.show()
