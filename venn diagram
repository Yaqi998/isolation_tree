import pandas as pd
import matplotlib.pyplot as plt
from matplotlib_venn import venn3, venn3_circles
from itertools import combinations

# Assuming your dataframe is called 'df' with a column 'hyperparam_type' for the 3 settings

# Step 1: Create sets of unique combinations for each hyperparameter type
hyperparams = df['hyperparam_type'].unique()[:3]  # Take first 3 if more exist
sets = {}

for hp in hyperparams:
    # Create unique identifiers by combining the three columns
    subset = df[df['hyperparam_type'] == hp]
    unique_combinations = subset[['partition', 'minute_of_the_week', 'date']].drop_duplicates()
    # Create tuples for hashability
    sets[hp] = set(unique_combinations.itertuples(index=False, name=None))

# Step 2: Calculate intersection sizes for venn3
# venn3 expects sizes in this order:
# (100, 010, 110, 001, 101, 011, 111)
# Where:
# 100 = only A, 010 = only B, 110 = Aâˆ©B only, etc.

A, B, C = sets[hyperparams[0]], sets[hyperparams[1]], sets[hyperparams[2]]

subset_sizes = (
    len(A - B - C),        # Only A
    len(B - A - C),        # Only B
    len(A & B - C),        # A and B but not C
    len(C - A - B),        # Only C
    len(A & C - B),        # A and C but not B
    len(B & C - A),        # B and C but not A
    len(A & B & C)         # All three

# Step 3: Visualize
plt.figure(figsize=(10, 8))
venn3(subsets=subset_sizes, 
      set_labels=(hyperparams[0], hyperparams[1], hyperparams[2]))
plt.title("Overlap Between Three Hyperparameter Settings")
plt.show()
